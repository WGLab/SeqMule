#!/usr/bin/env perl

#Copyright (C) <2012>  <Yunfei Guo>

#This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

#You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.


use warnings;
use strict;
use FindBin qw/$RealBin/;
use File::Spec;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;


my $install_dir=File::Spec->catdir($RealBin,"..","..");
my (
    $sge,$help,$script,$step,
);
#------------------------------------------------------------------------------------------------

@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'sge'		=>	\$sge,
    'n=i'		=>	\$step,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

die "ERROR: Script file missing or more than one arguments specified.\n" unless @ARGV==1;
$script=shift @ARGV;

if ($sge)
{
    die "NOT IMPLEMENTED YET\n";
    warn "Execute via Sun Grid Engine.\n";
    &SeqMule::Parallel::run($script,$step,1);
} else
{
    $SIG{INT}=\&stop;
    &SeqMule::Parallel::run($script,$step,0);
}


################SUBROUTINES#####################Â›
sub stop
{
    my @pid=&SeqMule::Parallel::getRunningPID($script);

    if (@pid)
    {
	for my $pid(@pid)
	{
	    #kill youngest children of pid first, then itself
	    my @all_pid;
	    my @next_round=`pgrep -P $pid`;
	    my @tmp_pid;

	    chomp @next_round;
	    unshift @all_pid,$pid,@next_round;

	    CHECK_PID: for my $current(@next_round)
	    {
		my @child=`pgrep -P $current`;
		chomp @child;
		push @tmp_pid,@child;
		unshift @all_pid,@child;
	    }
	    @next_round=@tmp_pid;

	    @tmp_pid=() and next CHECK_PID if (@next_round);

	    for (@all_pid)
	    {
		system("kill -9 $_ 2>/dev/null");
		#!system("kill -9 $_") or warn "Failed to kill $_: $!\n";
	    }
	}
	die "\n\n\nWARNING: Ctrl-C signal received, dying...\n";
    } else
    {
	#can't find PID, do nothing
	1;
    }
}


__END__


=head1 NAME

SeqMule an automatic pipeline for next-generation sequencing data analysis

=head1 SYNOPSIS

seqmule run <script_file> [options]

For details about each option, please use 'seqmule run -h':

Options:

      -n <INT>			run from step INT
      --sge			run each command via Sun Grid Engine
      -h,--help			help

      EXAMPLE

      #continue run from last executed step
      seqmule run your_analysis.script
      
      #run from a certain step
      seqmule run -n 10 your_analysis.script

=head1 OPTIONS

=over 8

=item B<--sge>

To run commands via Sun Grid Engine, SGE must be installed first, and all commands must be generated by 'seqmule pipeline' command with SGE option enabled.

=back

=head1 DESCRIPTION

SeqMule automatizes analysis of next-generation sequencing data by simplifying program installation, downloading of various databases, generation of analysis script, and customization of your pipeline.

=cut
